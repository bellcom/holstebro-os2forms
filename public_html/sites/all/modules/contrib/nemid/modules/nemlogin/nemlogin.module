<?php

/**
 * @file
 * Nemlogin main module file.
 */

module_load_include('inc', 'nemlogin', 'includes/nemlogin');

/**
 * Implements hook_menu().
 */
function nemlogin_menu() {
  // Adding parent menu item parent module is not active.
  if (!module_exists('nemid')) {
    $items['admin/config/nemid'] = array(
      'title' => 'NemID Settings',
      'position' => 'right',
      'weight' => -15,
      'access arguments' => array('administer site configuration'),
      'page callback' => 'system_admin_menu_block_page',
      'file' => 'system.admin.inc',
      'file path' => drupal_get_path('module', 'system'),
      'type' => MENU_NORMAL_ITEM,
    );
  }

  $items['admin/config/nemid/nemlogin'] = array(
    'title' => 'Configure Nemlogin',
    'description' => 'Configure Nemlogin settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nemlogin_settings_form'),
    'access arguments' => array('administer nemlogin configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/config/nemid/nemlogin/%'] = array(
    'title' => 'Nemlogin plugin configuration',
    'title callback' => 'nemlogin_plugin_settings_title',
    'title arguments' => array(4),
    'description' => 'Configure Nemlogin settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('nemlogin_plugin_settings_form', 4),
    'access arguments' => array('administer nemlogin configuration'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['nemlogin/login'] = array(
    'title' => 'Nemlogin login callback',
    'description' => 'Nemlogin login callback',
    'page callback' => 'nemlogin_plugin_call_method',
    'page arguments' => array('login'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['nemlogin/logout'] = array(
    'title' => 'Nemlogin logout',
    'description' => 'Nemlogin logout callback',
    'page callback' => 'nemlogin_plugin_call_method',
    'page arguments' => array('logout'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_ctools_plugin_type().
 */
function nemlogin_ctools_plugin_type() {
  return array(
    'nemlogin_auth' => array(
      'classes' => array('handler'),
      'child plugins' => TRUE,
      'use hooks' => TRUE,
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function nemlogin_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'nemlogin' && $plugin_type == 'nemlogin_auth') {
    return "plugins/$plugin_type";
  }
}

/**
 * Implements hook_permissions().
 */
function nemlogin_permissions() {
  return array(
    'administer nemlogin configuration' => array(
      'title' => t('Administer Nemlogin configuration'),
    ),
  );
}

/**
 * Configure menu item title callback.
 *
 * @param string $nemlogin_plugin_id
 *   Plugin id.
 *
 * @return array|mixed|string|null
 *   Formatted title.
 */
function nemlogin_plugin_settings_title($nemlogin_plugin_id) {
  return t('Nemlogin !title plugin configuration', array('!title' => $nemlogin_plugin_id));
}

/**
 * Call plugin method.
 *
 * @param string $method
 *   Calling method name.
 */
function nemlogin_plugin_call_method($method) {
  $args = func_get_args();

  /** @var NemloginAuthInterface $nemlogin_plugin_class */
  $class = nemlogin_get_plugin_object();
  if (!method_exists($class, $method)) {
    return;
  }

  // Call plugin method.
  call_user_func(array($class, $method), $args);
}

/**
 * Nemlogin settings form definition.
 */
function nemlogin_settings_form() {
  $form = array();

  $headers = array(
    'Name',
    'Status',
    'Actions',
  );
  $nemlogin_plugin_id = variable_get('nemlogin_plugin_id');
  $form['header'] = array(
    '#prefix' => '<h2>',
    '#markup' => t('Select Nemlogin plugin'),
    '#suffix' => '</h2>',
  );
  ctools_include('plugins');
  foreach (ctools_get_plugins('nemlogin', 'nemlogin_auth') as $plugin_id => $plugin) {
    $class_name = ctools_plugin_get_class($plugin, 'handler');
    if (class_exists($class_name)) {
      /** @var NemloginAuthInterface $nemlogin_plugin_class */
      $class = new $class_name();
    }
    $options[$plugin_id] = array(
      $plugin['title'],
    );

    if (empty($class)) {
      $options[$plugin_id][] = 'Plugin hanldler class is empty';
      continue;
    }
    $options[$plugin_id][] = $class->isInitialized() ? 'Ok' : t('Auth object initialization failed.');
    $options[$plugin_id][] = empty($class->settingsForm()) ? '' : l(t('Settings'), 'admin/config/nemid/nemlogin/' . $plugin_id, array(
      'query' => drupal_get_destination(),
    ));
  }

  $form['nemlogin_plugin_id'] = array(
    '#type' => 'tableselect',
    '#header' => $headers,
    '#options' => $options,
    '#multiple' => FALSE,
    '#default_value' => $nemlogin_plugin_id,
  );

  return system_settings_form($form);
}

/**
 * Nemlogin plugin settings form declaration.
 */
function nemlogin_plugin_settings_form($form, &$form_state, $nemlogin_plugin_id) {
  ctools_include('plugins');
  $nemlogin_plugins = ctools_get_plugins('nemlogin', 'nemlogin_auth');
  $nemlogin_plugin = isset($nemlogin_plugins[$nemlogin_plugin_id]) ? $nemlogin_plugins[$nemlogin_plugin_id] : NULL;

  $class_name = ctools_plugin_get_class($nemlogin_plugin, 'handler');
  if (class_exists($class_name)) {
    /** @var NemloginAuthInterface $nemlogin_plugin_class */
    $class = new $class_name();
    $settings = $class->settingsForm();
  }

  if (!empty($settings)) {
    $form[$nemlogin_plugin_id] = array(
      '#type' => 'fieldset',
      '#title' => $nemlogin_plugin['title'],
      'settings' => $settings,
    );
    $form['#submit'][] = 'nemlogin_settings_form_submit';
    $form_state['storage']['nemlogin_plugin_id'] = $nemlogin_plugin_id;
  }
  else {
    $form['markup'] = array('#markup' => t('There is no settings for this plugin'));
  }

  return system_settings_form($form);
}

/**
 * Nemlogin settings form validate handler.
 */
function nemlogin_plugin_settings_form_validate(&$form, &$form_state) {
  if (empty($form_state['storage']['nemlogin_plugin_id'])) {
    return;
  }

  $nemlogin_plugin_id = $form_state['storage']['nemlogin_plugin_id'];
  /** @var NemloginAuthInterface $nemlogin_auth */
  $nemlogin_plugin_class = nemlogin_get_plugin_object($nemlogin_plugin_id);
  if (empty($nemlogin_plugin_class)) {
    return;
  }
  $nemlogin_plugin_class->settingsFormValidate($form, $form_state);
}

/**
 * Nemlogin settings form submit handler.
 */
function nemlogin_settings_form_submit(&$form, &$form_state) {
  if (empty($form_state['storage']['nemlogin_plugin_id'])) {
    return;
  }

  $nemlogin_plugin_id = $form_state['storage']['nemlogin_plugin_id'];
  /** @var NemloginAuthInterface $nemlogin_auth */
  $nemlogin_plugin_class = nemlogin_get_plugin_object($nemlogin_plugin_id);
  if (empty($nemlogin_plugin_class)) {
    return;
  }
  $nemlogin_plugin_class->settingsFormSubmit($form, $form_state);
}

/**
 * Get plugin object function.
 *
 * @return null|NemloginAuthInterface
 *   Nemlogin auth object.
 */
function nemlogin_get_plugin_object($nemlogin_plugin_id = NULL) {
  if (empty($nemlogin_plugin_id)) {
    $nemlogin_plugin_id = variable_get('nemlogin_plugin_id');
  }
  ctools_include('plugins');
  $nemlogin_plugins = ctools_get_plugins('nemlogin', 'nemlogin_auth');

  if (empty($nemlogin_plugins[$nemlogin_plugin_id])) {
    return NULL;
  }

  $class_name = ctools_plugin_get_class($nemlogin_plugins[$nemlogin_plugin_id], 'handler');
  if (!class_exists($class_name)) {
    return NULL;
  }

  return new $class_name();
}

/**
 * Generates a NemID link.
 *
 * @param string $login_text
 *   Login link text.
 * @param string $logout_text
 *   Logout link text.
 * @param array $options
 *   Link options @see l().
 *
 * @return string
 *   Generated URL.
 */
function nemlogin_link($login_text = NULL, $logout_text = NULL, array $options = array()) {
  $login_text = isset($login_text) ? $login_text : t('Login with Nemlogin');
  $logout_text = isset($logout_text) ? $logout_text : t('Logout with Nemlogin');

  $nemlogin_object = nemlogin_get_plugin_object();
  if (empty($nemlogin_object)) {
    drupal_set_message(t("Nemlogin authorization object is empty."), 'warning');
    return NULL;
  }

  if (!$nemlogin_object->isInitialized()) {
    drupal_set_message(t("Nemlogin authorization object doesn't work properly."), 'warning');
    return NULL;
  }

  return $nemlogin_object->isAuthenticated()
    ? l($logout_text, nemlogin_get_logout_url($options))
    : l($login_text, nemlogin_get_login_url($options));
}

/**
 * Generates a NemID login URL.
 *
 * @param array $options
 *   Link options @see l().
 *
 * @return string
 *   Generated login URL.
 */
function nemlogin_get_login_url(array $options = array()) {
  $options += array('absolute' => TRUE);

  if (empty($options['query']['destination'])) {
    $options['query']['destination'] = ltrim(request_uri(), '/');
  }

  return url('nemlogin/login', $options);
}

/**
 * Generates a NemID logout URL.
 *
 * @param array $options
 *   Link options @see l().
 *
 * @return string
 *   Generated login URL.
 */
function nemlogin_get_logout_url(array $options = array()) {
  $options += array('absolute' => TRUE);

  if (empty($options['query']['destination'])) {
    $options['query']['destination'] = ltrim(request_uri(), '/');
  }

  return url('nemlogin/logout', $options);
}
